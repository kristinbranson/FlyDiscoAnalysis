function repro_erroring_experiment(original_expdir, user_name_for_configuration_purposes, varargin)

% Deal with options arguments
[do_use_internal_settings, ...
 do_reset_working_experiments_folder, ...
 analysis_parameters] = ...
  myparse(varargin, ...
          'do_use_internal_settings', false, ...
          'do_reset_working_experiments_folder', false, ...
          'analysis_parameters', cell(1,0)) ;

% Where does this script live?
this_script_path = mfilename('fullpath') ;
fly_disco_analysis_test_folder_path = fileparts(this_script_path) ;
fly_disco_analysis_folder_path = fileparts(fly_disco_analysis_test_folder_path) ;
fly_disco_folder_path = fileparts(fly_disco_analysis_folder_path) ;

cluster_billing_account_name = [] ;
%user_name_for_configuration_purposes = 'bransonlab' ;
%analysis_parameters = cell(1,0) ;
% analysis_parameters = ...
%          {'doautomaticchecksincoming',true,...
%           'doflytracking',true, ...
%           'doregistration',true,...
%           'doledonoffdetection',true,...
%           'dosexclassification',false,...
%           'dotrackwings',false,...
%           'docomputeperframefeatures',false,...
%           'docomputehoghofperframefeatures',false,...
%           'dojaabadetect',false,...
%           'docomputeperframestats',false,...
%           'doplotperframestats',false,...
%           'domakectraxresultsmovie',false,...
%           'doextradiagnostics',false,...
%           'doanalysisprotocol',false,...
%           'doautomaticcheckscomplete',false, ...
%           'domakeaptresultsmovie',false, ...
%           'doapt',false} ;
%settings_folder_path = fullfile(fly_disco_analysis_folder_path, 'settings-internal') ;  % for now, want to use internal settings
%settings_folder_path = '/groups/branson/bransonlab/taylora/flydisco/OtopalikFlyDiscoSettings/settings' ;  % at same commit as when prod run happened
do_use_bqueue = false ;
do_actually_submit_jobs = false ;
do_try = false ;
%do_reset_working_experiments_folder = false ;
submit_host_name = if_not_a_submit_host('submit.int.janelia.org') ;
if do_use_internal_settings ,
  settings_folder_path = fullfile(fly_disco_analysis_folder_path, 'settings-internal') ;    
  initial_optional_argument_list = { ...
    'settingsdir', settings_folder_path, ...
    } ;
else
  % Leave out settingsdir optional argument, let in be determined by
  % run_transfero_FlyDiscoPipeline_wrapper_on_experiment_list().
  initial_optional_argument_list = cell(1,0) ;
end
optional_argument_list = horzcat(initial_optional_argument_list, analysis_parameters) ;

working_experiments_folder_name = sprintf('repro-erroring-experiment-%s', char(datetime('today', 'Format', 'yyyy-MM-dd'))) ;
read_only_experiments_folder_name = sprintf('%s-read-only', working_experiments_folder_name) ;
read_only_experiments_folder_path = fullfile(fly_disco_folder_path, 'example-experiments', read_only_experiments_folder_name) ;
working_experiments_folder_path = fullfile(fly_disco_folder_path, 'example-experiments', working_experiments_folder_name) ;
[~,original_expdir_name] = fileparts(original_expdir) ;
read_only_expdir_path = fullfile(read_only_experiments_folder_path, original_expdir_name) ;

% Copy the original expdir to the read-only one
if ~exist(read_only_experiments_folder_path, 'dir')
  fprintf('Creating read-only experiments folder from production experiment folder...\n') ;
  tic_id = tic() ;
  ensure_folder_exists(read_only_experiments_folder_path) ;
  system_from_list_with_error_handling( ...
    {'cp', '--no-preserve=mode', '-R', '-T', original_expdir, read_only_expdir_path} ) ;
  elapsed_time = toc(tic_id) ;
  fprintf('Elapsed time: %g s\n', elapsed_time) ;
end

% Recopy the working folder from the read-only one
if do_reset_working_experiments_folder || ~exist(working_experiments_folder_path, 'dir')
  fprintf('Resetting working experiments folder...\n') ;
  tic_id = tic() ;
  reset_experiment_working_copies(working_experiments_folder_path, read_only_experiments_folder_path) ;
  elapsed_time = toc(tic_id) ;
  fprintf('Elapsed time: %g s\n', elapsed_time) ;
end

% Find the experiments
folder_path_from_experiment_index = find_experiment_folders(working_experiments_folder_path) ;

% Call the testing function to do the real work
run_transfero_FlyDiscoPipeline_wrapper_on_experiment_list(...
  folder_path_from_experiment_index, ...
  cluster_billing_account_name, ...
  user_name_for_configuration_purposes, ...
  do_use_bqueue, ...
  do_actually_submit_jobs, ...
  do_try, ...
  submit_host_name, ...
  optional_argument_list{:})

% Check for success in the ACC output files
did_succeed_from_experiment_folder_index = cellfun(@did_acc_pass_for_experiment_folder, folder_path_from_experiment_index) ;
did_all_succeed = all(did_succeed_from_experiment_folder_index) ;
if did_all_succeed ,
  fprintf('Test passed.\n') ;
else
  error('Test failed.\n') ;  % Do an error here so hopefully will dbstop here, and we can e.g. inspect did_succeed_from_experiment_folder_index
end
