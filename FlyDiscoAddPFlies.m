function FlyDiscoAddPFlies(expdir, varargin)

% Deal with optional arguments
[analysis_protocol, settingsdir, dataloc_params, forcecompute, debug] = ...
  myparse(varargin,...
          'analysis_protocol','current_bubble',...
          'settingsdir', default_settings_folder_path(), ...
          'dataloc_params',struct(), ...
          'forcecompute', false, ...
          'debug',false) ;  %#ok<ASGLU> 

% Write a header for this stage to the 'log'
start_timestamp = datestr(now(), 'yyyymmddTHHMMSS') ;
fprintf('\n\n***\nRunning %s with analysis protocol %s at %s\n', mfilename(), analysis_protocol, start_timestamp) ;

% Read in the FlyTracker-output trx file
unregistered_trx_file_path = fullfile(expdir, dataloc_params.ctraxfilestr) ;
original_trx_wrapper = load('-mat', unregistered_trx_file_path) ;
original_trx = original_trx_wrapper.trx ;

% Read in the movie-frame timestamps, since these are sometimes more accurate
% than the timestamps generated by rounding off the frame rate and generating
% a canonical array of timestamps
movie_path = fullfile(expdir, dataloc_params.moviefilestr) ;
[~,movie_leaf_name] = fileparts2(movie_path) ;
if strcmp(movie_leaf_name, 'dotmovie.ufmf') ,
  movie_timestamp_file_name = 'stamp_log_cam1.txt' ;
else
  movie_timestamp_file_name = 'stamp_log_cam0.txt' ;
end 
movie_timestamp_file_path = fullfile(expdir, movie_timestamp_file_name) ;
timestamp_from_movie_frame_index = importdata(movie_timestamp_file_path)' ;
%frame_count = numel(timestamp_from_movie_frame_index) ;

% ellipseTrajectory.csv contains a look-up table from indices to <x,y>
ellipse_trajectory_csv_path = fullfile(expdir, 'ellipseTrajectory.csv') ;
ellipse_trajectory = readmatrix(ellipse_trajectory_csv_path) ;

% Read in actualTraj.csv
% actualTraj.csv contains a LUT index for each frame
actual_trajectory_csv_path = fullfile(expdir, 'actualTraj.csv') ;
actual_trajectory = load_actual_traj_csv(actual_trajectory_csv_path) ;
if isempty(actual_trajectory) ,
  error('The file %s does not seem to contain any data', actual_trajectory_csv_path) ;
end

% Load the flytracker info about the arena locations and size, etc
ft_calibration_path = fullfile(expdir, 'flytracker-calibration.mat') ;
flytracker_calibration = load_anonymous(ft_calibration_path) ;

% Read in the fake-fly config, to get fake fly ellipse dimensions
fake_fly_params_file_path = fullfile(expdir, 'ellipseTrajectory_config.csv') ;
fake_fly_params =  readtable(fake_fly_params_file_path) ; 

% Create the trx struct array for the pflies
maximum_real_fly_id = max([original_trx.id]) ;
arena_center_shift = [ 0 0 ]' ;  % pels
fake_trx = ...
  fake_fly_trx_from_various_inputs(movie_path, timestamp_from_movie_frame_index, ellipse_trajectory, actual_trajectory, ...
                                   flytracker_calibration, fake_fly_params, maximum_real_fly_id, arena_center_shift, debug) ;

% Create the final output struct
augmented_original_trx = arrayfun(@(s)(add_fields(s, 'is_pfly', false)), original_trx) ;
trx = [ augmented_original_trx fake_trx ] ;
trx_wrapper = struct('trx', {trx}, 'timestamps', {original_trx_wrapper.timestamps}) ;

% Before overwriting the unregistered trx file, make a backup
[parent_folder_path, base_name, ext] = fileparts(unregistered_trx_file_path) ;
max_backup_file_index = 100 ;
did_find_valid_backup_file_path = false ;
for backup_file_index = 1:max_backup_file_index ,
  putative_backup_file_name = sprintf('%s-backup-%02d%s', base_name, backup_file_index, ext) ;
  putative_backup_file_path = fullfile(parent_folder_path, putative_backup_file_name) ;
  if ~exist(putative_backup_file_path, 'file') ,
    did_find_valid_backup_file_path = true ;
      backup_file_path = putative_backup_file_path ;
    break
  end
end
if did_find_valid_backup_file_path ,
  [did_succeed, message, messageid] = copyfile(unregistered_trx_file_path, backup_file_path) ;
  if ~did_succeed ,
    error(messageid, 'Unable to backup %s to %s before adding projected fly tracks: %s', unregistered_trx_file_path, backup_file_path, message) ;
  end
else
  error('Unable to find a filename for the pfiles backup trx file, after trying %d options', max_backup_file_index) ;
end

% Write the output file
save('-mat', '-v7.3', unregistered_trx_file_path, '-struct', 'trx_wrapper') ;

% Final message
end_timestamp = datestr(now(), 'yyyymmddTHHMMSS') ;
fprintf('\nFinished running %s at %s.\n', mfilename(), end_timestamp) ;
